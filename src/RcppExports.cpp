// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;

// sampling
void sampling(mat& x, rowvec& s, int NT, int nthin, int nupd, int Nburn, vec& g, double nu_g, double tausq_g, vec& delta, double beta_delta, vec& sigma0sq, double beta0, vec& sigma1sq, double beta1, mat& z, vec& gammam, Row<int>& clu, double beta_pi, double alpha_lambda, mat& g_seq, mat& delta_seq, mat& sigma0sq_seq, mat& sigma1sq_seq, mat& z_seq, Mat<int>& c_seq, mat& gamma_seq, vec& beta_pi_seq, vec& alpha_lambda_seq, vec& nu_g_seq, vec& tausq_g_seq, vec& beta_delta_seq, vec& beta0_seq, vec& beta1_seq, vec& llambda, vec& lpi, vec& lobs, vec& lother, vec& lpost, double m_g, double dsq_g, double a_g, double b_g, double alpha_delta, double alpha0, double alpha1, double a_l, double b_l, double nu1, double tau1sq, double nu2, double tau2sq, double alpha_pi);
RcppExport SEXP _BasClu_sampling(SEXP xSEXP, SEXP sSEXP, SEXP NTSEXP, SEXP nthinSEXP, SEXP nupdSEXP, SEXP NburnSEXP, SEXP gSEXP, SEXP nu_gSEXP, SEXP tausq_gSEXP, SEXP deltaSEXP, SEXP beta_deltaSEXP, SEXP sigma0sqSEXP, SEXP beta0SEXP, SEXP sigma1sqSEXP, SEXP beta1SEXP, SEXP zSEXP, SEXP gammamSEXP, SEXP cluSEXP, SEXP beta_piSEXP, SEXP alpha_lambdaSEXP, SEXP g_seqSEXP, SEXP delta_seqSEXP, SEXP sigma0sq_seqSEXP, SEXP sigma1sq_seqSEXP, SEXP z_seqSEXP, SEXP c_seqSEXP, SEXP gamma_seqSEXP, SEXP beta_pi_seqSEXP, SEXP alpha_lambda_seqSEXP, SEXP nu_g_seqSEXP, SEXP tausq_g_seqSEXP, SEXP beta_delta_seqSEXP, SEXP beta0_seqSEXP, SEXP beta1_seqSEXP, SEXP llambdaSEXP, SEXP lpiSEXP, SEXP lobsSEXP, SEXP lotherSEXP, SEXP lpostSEXP, SEXP m_gSEXP, SEXP dsq_gSEXP, SEXP a_gSEXP, SEXP b_gSEXP, SEXP alpha_deltaSEXP, SEXP alpha0SEXP, SEXP alpha1SEXP, SEXP a_lSEXP, SEXP b_lSEXP, SEXP nu1SEXP, SEXP tau1sqSEXP, SEXP nu2SEXP, SEXP tau2sqSEXP, SEXP alpha_piSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< rowvec& >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type NT(NTSEXP);
    Rcpp::traits::input_parameter< int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< int >::type nupd(nupdSEXP);
    Rcpp::traits::input_parameter< int >::type Nburn(NburnSEXP);
    Rcpp::traits::input_parameter< vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type nu_g(nu_gSEXP);
    Rcpp::traits::input_parameter< double >::type tausq_g(tausq_gSEXP);
    Rcpp::traits::input_parameter< vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_delta(beta_deltaSEXP);
    Rcpp::traits::input_parameter< vec& >::type sigma0sq(sigma0sqSEXP);
    Rcpp::traits::input_parameter< double >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< vec& >::type sigma1sq(sigma1sqSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< vec& >::type gammam(gammamSEXP);
    Rcpp::traits::input_parameter< Row<int>& >::type clu(cluSEXP);
    Rcpp::traits::input_parameter< double >::type beta_pi(beta_piSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_lambda(alpha_lambdaSEXP);
    Rcpp::traits::input_parameter< mat& >::type g_seq(g_seqSEXP);
    Rcpp::traits::input_parameter< mat& >::type delta_seq(delta_seqSEXP);
    Rcpp::traits::input_parameter< mat& >::type sigma0sq_seq(sigma0sq_seqSEXP);
    Rcpp::traits::input_parameter< mat& >::type sigma1sq_seq(sigma1sq_seqSEXP);
    Rcpp::traits::input_parameter< mat& >::type z_seq(z_seqSEXP);
    Rcpp::traits::input_parameter< Mat<int>& >::type c_seq(c_seqSEXP);
    Rcpp::traits::input_parameter< mat& >::type gamma_seq(gamma_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type beta_pi_seq(beta_pi_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type alpha_lambda_seq(alpha_lambda_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type nu_g_seq(nu_g_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type tausq_g_seq(tausq_g_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type beta_delta_seq(beta_delta_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type beta0_seq(beta0_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type beta1_seq(beta1_seqSEXP);
    Rcpp::traits::input_parameter< vec& >::type llambda(llambdaSEXP);
    Rcpp::traits::input_parameter< vec& >::type lpi(lpiSEXP);
    Rcpp::traits::input_parameter< vec& >::type lobs(lobsSEXP);
    Rcpp::traits::input_parameter< vec& >::type lother(lotherSEXP);
    Rcpp::traits::input_parameter< vec& >::type lpost(lpostSEXP);
    Rcpp::traits::input_parameter< double >::type m_g(m_gSEXP);
    Rcpp::traits::input_parameter< double >::type dsq_g(dsq_gSEXP);
    Rcpp::traits::input_parameter< double >::type a_g(a_gSEXP);
    Rcpp::traits::input_parameter< double >::type b_g(b_gSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_delta(alpha_deltaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type a_l(a_lSEXP);
    Rcpp::traits::input_parameter< double >::type b_l(b_lSEXP);
    Rcpp::traits::input_parameter< double >::type nu1(nu1SEXP);
    Rcpp::traits::input_parameter< double >::type tau1sq(tau1sqSEXP);
    Rcpp::traits::input_parameter< double >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< double >::type tau2sq(tau2sqSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_pi(alpha_piSEXP);
    sampling(x, s, NT, nthin, nupd, Nburn, g, nu_g, tausq_g, delta, beta_delta, sigma0sq, beta0, sigma1sq, beta1, z, gammam, clu, beta_pi, alpha_lambda, g_seq, delta_seq, sigma0sq_seq, sigma1sq_seq, z_seq, c_seq, gamma_seq, beta_pi_seq, alpha_lambda_seq, nu_g_seq, tausq_g_seq, beta_delta_seq, beta0_seq, beta1_seq, llambda, lpi, lobs, lother, lpost, m_g, dsq_g, a_g, b_g, alpha_delta, alpha0, alpha1, a_l, b_l, nu1, tau1sq, nu2, tau2sq, alpha_pi);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BasClu_sampling", (DL_FUNC) &_BasClu_sampling, 53},
    {NULL, NULL, 0}
};

RcppExport void R_init_BasClu(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
