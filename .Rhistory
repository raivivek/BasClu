return (list(acceptance_prob = length(idx)/n, vals = Y[idx]))
}
res <- accept_reject()
res$acceptance_prob
pi
args <- c(5, 1000)
a <- as.integer(args[1])
n <- as.integer(args[2])
MC.integral <- function(m, integrand, sampler){
x = sampler(m)
r = integrand(x)
return(r)
}
sampler_c1 <- rcauchy(1)
sampler_c2 <- function(x) { runif(1, 0, 1/x) }
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
sampler_c1 <- rcauchy(1)
sampler_c2 <- function(x) { runif(1, 0, 1/x) }
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
sampler_c1 <- function(x) rcauchy(1)
sampler_c2 <- function(x) { runif(1, 0, 1/x) }
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
integrand <- function(x, a) {
return(pi * exp(x-a)/(1+x^2))
}
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
integrand <- function(x) {
return(pi * exp(x-a)/(1+x^2))
}
sampler_c2 <- function() { runif(1, 0, 1/a) }
integrand <- function(x) {
return(pi * exp(x-a)/(1+x^2))
}
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
integrand
sampler_c1
sampler_c1()
sampler_c1()
MC.integral <- function(m, integrand, sampler){
x = sampler(m)
r = integrand(x)
return(r)
}
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
MC.integral()
MC.integral
sampler(10)
sampler_c1(10)
sampler_c1 <- function(m) rcauchy(m)
sampler_c2 <- function(m) { runif(m, 0, 1/a) }
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
m <- 1e6
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
m
MC.integral(10, integrand, sampler_c1())
MC.integral(10, integrand, sampler_c1
)
MC.integral(10, integrand, sampler_c1)
MC.integral(10000, integrand, sampler_c1)
m <- 1000000
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
MC.integral <- function(m, integrand, sampler){
x = sampler(m)
r = integrand(x)
return(r)
}
res <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
traceback()
res <- MC.integral(m, integrand, sampler_c1)
length(res)
res2 <- MC.integral(m, integrand, sampler_c2)
cat(formatC(sd(res1), digits = 1), end = "", sep = " ")
cat(formatC(sd(res2), digits = 1), end = "", sep = " ")
res1 <- MC.integral(m, integrand, sampler_c1)
res2 <- MC.integral(m, integrand, sampler_c2)
cat(formatC(sd(res1), digits = 1), end = "", sep = " ")
cat(formatC(sd(res2), digits = 1), end = "", sep = " ")
res1
sd(res1)
var(res1)
range(res1)
range(res2)
sd(res2)
integrand <- function(x) {
mean(x > a)
}
res1 <- MC.integral(m, integrand, sampler_c1)
cat(formatC(sd(res1), digits = 1), end = "", sep = " ")
res1
x = sampler_c1(m)
length(x)
mean(x > a)
sd(x > a)
res1 <- MC.integral(m, integrand, sampler_c1)
integrand <- function(x) {
return(x > a)
}
cat(formatC(sd(res1), digits = 1), end = "", sep = " ")
res1
integrand <- function(x) {
return(x > a)
}
res1 <- MC.integral(m, integrand, sampler_c1)
length(res1)
cat(formatC(sd(res1), digits = 1), end = "", sep = " ")
n
res1 <- sapply(1:n, MC.integral(m, integrand, sampler_c1))
res1 <- sapply(1:n, function(x) MC.integral(m, integrand, sampler_c1))
sd(res1)
dim(res1)
apply(res1, 1, sd)
sd(colMeans(res1))
cat(formatC(sd(colMeans(res1)), digits = 1), end = "", sep = " ")
res1 <- sapply(1:m, function(x) MC.integral(n, integrand, sampler_c1))
integrand <- function(x) {
mean(x > a)
}
res1 <- sapply(1:m, function(x) MC.integral(n, integrand, sampler_c1))
dim(res1)
head(res1)
sd(res1)
cat(formatC(sd((res1)), digits = 1), end = "", sep = " ")
length(res1)
head(res1)
integrand_c2 <- function(x) {
(a-1)/a/pi/(1 + x^2)
}
integrand_c1 <- function(x) {
mean(x > a)
}
res1 <- sapply(1:m, function(x) MC.integral(n, integrand_c1, sampler_c1))
res2 <- sapply(1:m, function(x) MC.integral(n, integrand_c2, sampler_c2))
sd(res1)
sd(res2)
rm(res1)
rm(res2)
m <- 10000
res1 <- sapply(1:m, function(x) MC.integral(n, integrand_c1, sampler_c1))
res2 <- sapply(1:m, function(x) MC.integral(n, integrand_c2, sampler_c2))
sd(res1)
sd(res2)
args <- c(1000, 10)
a <- as.integer(args[1])
n <- as.integer(args[2])
m <- 1e6
sampler_c1 <- function(m) rcauchy(m)
sampler_c2 <- function(m) { runif(m, 0, 1/a) }
res1 <- sapply(1:2, function(x) MC.integral(n, integrand_c1, sampler_c1))
res2 <- sapply(1:2, function(x) MC.integral(n, integrand_c2, sampler_c2))
res1
res2
integrand_c2 <- function(x) {
mean((a-1)/pi/(1 + x^2))
}
res1 <- sapply(1:2, function(x) MC.integral(n, integrand_c1, sampler_c1))
res2 <- sapply(1:2, function(x) MC.integral(n, integrand_c2, sampler_c2))
res1
res2
integrand_c2 <- function(x) {
mean((a-1)/pi/(1 + x^2)/a^2)
}
res2 <- sapply(1:2, function(x) MC.integral(n, integrand_c2, sampler_c2))
res2
res1 <- sapply(1:100, function(x) MC.integral(n, integrand_c1, sampler_c1))
res2 <- sapply(1:100, function(x) MC.integral(n, integrand_c2, sampler_c2))
sd(res1)
sd(res2 )
res1 <- sapply(1:10000, function(x) MC.integral(n, integrand_c1, sampler_c1))
sd(res1)
res2 <- sapply(1:10000, function(x) MC.integral(n, integrand_c2, sampler_c2))
sd(res2)
integrate(function(x) exp(-x)/(1+x^2), 0, Inf)
true_estimate <- integrate(function(x) exp(-x)/(1+x^2), a, Inf)
true_estimate
a
?mse
mse
??mse
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
mse <- function(exp, obs) {
mean((exp - obs) ^ 2)
}
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
res1
res1 - true_es
true_estimate
true_estimate$value
true_estimate <- integrate(function(x) exp(-x)/(1+x^2), a, Inf)$value
mse <- function(exp, obs) {
mean((exp - obs) ^ 2)
}
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
cat(formatC(mse(res2, true_estimate), digits = 1), end = "", sep = " ")
res2 <- sapply(1:10000, function(x) MC.integral(n, integrand_c2, sampler_c2))
cat(formatC(mse(res2, true_estimate), digits = 1), end = "", sep = " ")
res2 <- sapply(1:m, function(x) MC.integral(n, integrand_c2, sampler_c2))
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
integrand_c2 <- function(x) {
mean(exp(x-a)/pi/(1+x^2)/a)
}
res2 <- sapply(1:m, function(x) MC.integral(n, integrand_c2, sampler_c2))
cat(formatC(mse(res2, true_estimate), digits = 1), end = "", sep = " ")
range(res2)
runif(5, 0, 1/a)
integrand_c2 <- function(x) {
mean(1/(1+x^2)/pi)
}
res2 <- sapply(1:m, function(x) MC.integral(n, integrand_c2, sampler_c2))
cat(formatC(mse(res2, true_estimate), digits = 1), end = "", sep = " ")
head(res2)
range(res2)
true_estimate
head(x)
head(1+x^2)
head(1/(1+x^2))
head(1/(1+x^2)/pi)
args <- c(5, 1000)
a <- as.integer(args[1])
n <- as.integer(args[2])
res1 <- sapply(1:m, function(x) MC.integral(n, integrand_c1, sampler_c1))
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
true_estimate <- integrate(function(x) exp(-x)/(1+x^2), a, Inf)$value
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
true_estimate
a <- as.integer(args[1])
n <- as.integer(args[2])
true_estimate <- integrate(function(x) exp(-x)/(1+x^2), a, Inf)$value
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
head(res1)
true_estimate <- integrate(function(x) 1/(1+x^2)/pi, a, Inf)$value
true_estimate
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
res2 <- sapply(1:m, function(x) MC.integral(n, integrand_c2, sampler_c2))
true_estimate <- integrate(function(x) 1/(1+x^2)/pi, a, Inf)$value
head(res2)
true_estimate
cat(formatC(mse(res1, true_estimate), digits = 1), end = "", sep = " ")
cat(formatC(mse(res2, true_estimate), digits = 1), end = "", sep = " ")
integrand_c2 <- function(x) {
mean(exp(x-a)/(1+x^2)/pi/a)
}
res2 <- sapply(1:1000, function(x) MC.integral(n, integrand_c2, sampler_c2))
range(res2)
integrand_c2 <- function(x) {
mean(1/(1+x^2)/pi/a)
}
res2 <- sapply(1:1000, function(x) MC.integral(n, integrand_c2, sampler_c2))
range(res2)
cat(formatC(mse(res2, true_estimate), digits = 1), end = "", sep = " ")
res2 <- sapply(1:m, function(x) MC.integral(n, integrand_c2, sampler_c2))
cat(formatC(mse(res2, true_estimate), digits = 1), end = "", sep = " ")
drayleigh <- function(x, sigma) {
x/sigma^2 * exp(-x^2/2/sigma^2)
}
drayleigh(2, 1)
drayleigh(2, 0)
drayleigh(2, 0.1)
drayleigh(50, 0.1)
rrayleigh <- function(n, sigma) {
sigma * sqrt(-2 * log(runif(n)))
}
rrayleigh(10, .1)
sigma <- as.numeric(args[1])
## Sample "n" numbers from rayleigh
obs_mean <- mean(rrayleigh(n, sigma))
obs_mean
exp_mean <- sigma * sqrt(pi/2)
exp_mean
boot_mean <- sapply(1:B, function(i) {
mean(rrayleigh(n, sigma))
})
B <- as.integer(args[4])
boot_mean <- sapply(1:B, function(i) {
mean(rrayleigh(n, sigma))
})
B
args <- c(1.0, 10, 0.8, 10)
B <- as.integer(args[4])
B
boot_mean <- sapply(1:B, function(i) {
mean(rrayleigh(n, sigma))
})
range(boot_mean)
boot_mean
cutoff_upper <- drayleigh(cf.lvl, sigma)
cutoff_lower <- drayleigh(1-cf.lvl, sigma)
cf.lvl <- as.numeric(args[3])
cutoff_upper <- drayleigh(cf.lvl, sigma)
cutoff_lower <- drayleigh(1-cf.lvl, sigma)
cutoff_upper
cutoff_lower
qrayleigh <- function(q, sigma) {
1 - exp(-q^2/2/sigma^2)
}
cutoff_upper <- qrayleigh(cf.lvl, sigma)
cutoff_lower <- qrayleigh(1-cf.lvl, sigma)
cutoff_upper
cutoff_lower
?qnorm
qrayleigh <- function(q, sigma, lower.tail = T) {
val <- 1 - exp(-q^2/2/sigma^2)
if(lower.tail) val else 1-val
}
cutoff_upper <- qrayleigh(cf.lvl, sigma)
cutoff_lower <- qrayleigh(cf.lvl, sigma, lower.tail = T)
cutoff_lower
cutoff_upper
cutoff_upper <- qrayleigh(cf.lvl, sigma, lower.tail = F)
cutoff_upper
obs_mean
qrayleigh(.95, sigma, lower.tail = F)
qrayleigh(.01, sigma, lower.tail = F)
sigma
args <- c(1.0, 10, 0.8, 10)
sigma <- as.numeric(args[1])
n <- as.integer(args[2])
cf.lvl <- as.numeric(args[3])
B <- as.integer(args[4])
sigma
replicates <- 10000
drayleigh <- function(x, sigma) {
x/sigma^2 * exp(-x^2/2/sigma^2)
}
qrayleigh <- function(q, sigma, lower.tail = T) {
val <- 1 - exp(-q^2/2/sigma^2)
if(lower.tail) val else 1-val
}
rrayleigh <- function(n, sigma) {
sigma * sqrt(-2 * log(runif(n)))
}
boot_mean <- sapply(1:B, function(i) {
mean(rrayleigh(n, sigma))
})
range(boot_mean)
sigma
cutoff_upper <- qrayleigh(cf.lvl, sigma, lower.tail = F)
cutoff_upper
cutoff_lower
cutoff_upper <- qrayleigh(cf.lvl, sigma, lower.tail = T)
cutoff_upper
cf.lvl
qrayleigh <- function(q, sigma, lower.tail = T) {
F <- 1 - exp(-q^2/2/sigma^2)
sigma * sqrt(-2 * log(1-F))
}
cutoff_upper <- qrayleigh(cf.lvl, sigma, lower.tail = F)
cutoff_upper
mean(boot_mean)
B <- 100
boot_mean <- sapply(1:B, function(i) {
mean(rrayleigh(n, sigma))
})
mean(boot_mean)
n <- 100
boot_mean <- sapply(1:B, function(i) {
mean(rrayleigh(n, sigma))
})
n <- 100
mean(boot_mean)
cf.lvl <- as.numeric(args[3])
B <- as.integer(args[4])
r_sample <- rrayleigh(n, sigma)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE))
})
range(boot_mean)
r_sample <- rrayleigh(n, sigma)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE))
})
range(boot_mean)
mean(boot_mean)
r_sample <- rrayleigh(n, sigma)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE))
})
mean(boot_mean)
r_sample <- rrayleigh(n, sigma)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE))
})
mean(boot_mean)
r_sample <- rrayleigh(n, sigma)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE))
})
mean(boot_mean)
sqrt(2/pi)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE)) * sqrt(2/pi)
})
range(boot_mean)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE)) * sqrt(2/pi)
})
range(boot_mean)
obs_mean
qnorm(.8)
qnorm(.8, lower.tail = F)
qnorm(.8, lower.tail = T)
qnorm(.8, lower.tail = T)
error <- qnorm(cf.lvl)
lower_c <- boot_mean - error
upper_c <- boot_mean + error
head(lower_c)
error
error <- sd(boot_mean) * qnorm(cf.lvl)
lower_c <- boot_mean - error
upper_c <- boot_mean + error
error
lower_c
sum(sigma > lower_c | sigma < upper_c)
length(lower_c)
lower_c
upper-c
upper_c
sum(sigma > lower_c & sigma < upper_c)
sum(sigma > lower_c & sigma < upper_c)/10
sum(sigma > lower_c & sigma < upper_c)/n
n
sigma <- as.numeric(args[1])
n <- as.integer(args[2])
cf.lvl <- as.numeric(args[3])
B <- as.integer(args[4])
replicates <- 10000
r_sample <- rrayleigh(n, sigma)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE)) * sqrt(2/pi)
})
error <- sd(boot_mean) * qnorm(cf.lvl)
lower_c <- boot_mean - error
upper_c <- boot_mean + error
sum(sigma > lower_c & sigma < upper_c)/n
args <- c(5, 100, 0.8, 100)
sigma <- as.numeric(args[1])
n <- as.integer(args[2])
cf.lvl <- as.numeric(args[3])
B <- as.integer(args[4])
r_sample <- rrayleigh(n, sigma)
boot_mean <- sapply(1:B, function(i) {
mean(sample(r_sample, size = n, replace = TRUE)) * sqrt(2/pi)
})
error <- sd(boot_mean) * qnorm(cf.lvl)
lower_c <- boot_mean - error
upper_c <- boot_mean + error
sum(sigma > lower_c & sigma < upper_c)/n
scientific_10x <- function(values, digits = 1) {
if(!is.numeric(values)){
stop("values must be numbers")
}
if(grepl("^\\d{2}$", digits)){
stop("digits must a one or two digit whole number")
}
x <- sprintf(paste0("%.", digits, "e"), values)
x <- gsub("^(.*)e", "'\\1'e", x)
longestExponent <- max(sapply(gregexpr("\\d{1,}$", x), attr, 'match.length'))
zeroTrimmed <- ifelse(longestExponent > 2,
paste0("\\1", paste(rep("~", times = longestExponent-1), collapse = "")),
"\\1")
x <- gsub("(e[+|-])[0]", zeroTrimmed, x)
x <- gsub("e", "~x~10^", x)
if(any(grepl("\\^\\-", x))){
x <- gsub("\\^\\+", "\\^~~", x)
} else {
x <- gsub("\\^\\+", "\\^", x)
}
# return this as an expression
parse(text=x)
}
library(ggplot2)
x <- 1:3
y <- c(0.1, 100, 1000)
# Base Plotting
originalMargins <- par()$mar
plot(y ~ x,
axes = F,
par(mar = c(5, 5, 4, 2) + 0.1), ylab = NA)
axis(1)
axis(2,
at = y,
labels = scientific_10x(y),
las = 2)
par(mar = originalMargins)
# ggplot2
ggplot2::qplot(x, y) +
ggplot2::scale_y_continuous(labels = scientific_10x)
ggplot2::qplot(x, y) +
ggplot2::scale_y_continuous(breaks = y,
labels = scientific_10x(y, digits = 2))
attributes("lm")
a <- lm.fit(iris[, 1] ~ iris[, 2])
a <- .lm.fit(iris[, 1] ~ iris[, 2])
a <- .lm.fit(iris[, 1], iris[, 2])
a <- .lm.fit(iris[, 1], as.matrix(iris[, 2]))
head(iris[, 2])
a <- .lm.fit(iris[, 1], as.matrix(iris[, 2:3]))
class(as.matrix(iris[, 2:3]))
a <- .lm.fit(as.matrix(iris[, 2:3]), iris[, 1])
attributes("a")
a
attributes(a)
class(a)
a <- lm.fit(as.matrix(iris[, 2:3]), iris[, 1])
class(a)
a
getwd()
setwd("~/src/BasClu/")
package.skeleton(name="basClu", code_files="bas_clu.R")
library(roxygen2)
create("BasClu")
getwd()
